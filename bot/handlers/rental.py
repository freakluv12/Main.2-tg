from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from datetime import datetime, date

from database.database import SessionLocal
from database import crud
from database.models import RentalType, RentalStatus
from bot.states.states import CreateRentalStates, AddRenterStates, AddPaymentStates, AddFineStates
from bot.keyboards.inline import (
    rental_menu_keyboard, cars_keyboard, renters_keyboard, 
    rental_type_keyboard, rentals_keyboard, back_to_menu_keyboard
)
from bot.utils.helpers import (
    format_rental_info, parse_date, format_currency, 
    calculate_rental_days, validate_phone
)

router = Router()


@router.callback_query(F.data == "rental")
async def rental_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=rental_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "create_rental")
async def start_create_rental(callback: CallbackQuery, state: FSMContext):
    db = SessionLocal()
    try:
        available_cars = crud.get_available_cars(db)
        
        if not available_cars:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã.\n"
                "–í—Å–µ –º–∞—à–∏–Ω—ã —Å–¥–∞–Ω—ã –≤ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.",
                reply_markup=rental_menu_keyboard()
            )
            return
        
        await callback.message.edit_text(
            "üöó *–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É:",
            reply_markup=cars_keyboard(available_cars),
            parse_mode="Markdown"
        )
        await state.set_state(CreateRentalStates.waiting_for_car_selection)
        
    finally:
        db.close()


@router.callback_query(CreateRentalStates.waiting_for_car_selection, F.data.startswith("car_"))
async def select_car_for_rental(callback: CallbackQuery, state: FSMContext):
    car_id = int(callback.data.split("_")[1])
    await state.update_data(car_id=car_id)
    
    db = SessionLocal()
    try:
        renters = crud.get_renters(db)
        
        await callback.message.edit_text(
            "üë§ *–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
            reply_markup=renters_keyboard(renters),
            parse_mode="Markdown"
        )
        await state.set_state(CreateRentalStates.waiting_for_renter_selection)
        
    finally:
        db.close()


@router.callback_query(F.data == "add_renter")
async def start_add_renter(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_name)


@router.message(AddRenterStates.waiting_for_name)
async def process_renter_name(message: Message, state: FSMContext):
    await state.update_data(renter_name=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_phone)


@router.message(AddRenterStates.waiting_for_phone)
async def process_renter_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    await state.update_data(renter_phone=phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ email (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_email)


@router.message(AddRenterStates.waiting_for_email, F.text == "/skip")
async def skip_renter_email(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_passport)


@router.message(AddRenterStates.waiting_for_email)
async def process_renter_email(message: Message, state: FSMContext):
    await state.update_data(renter_email=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_passport)


@router.message(AddRenterStates.waiting_for_passport, F.text == "/skip")
async def skip_renter_passport(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_notes)


@router.message(AddRenterStates.waiting_for_passport)
async def process_renter_passport(message: Message, state: FSMContext):
    await state.update_data(renter_passport=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="Markdown"
    )
    await state.set_state(AddRenterStates.waiting_for_notes)


@router.message(AddRenterStates.waiting_for_notes, F.text == "/skip")
async def skip_renter_notes(message: Message, state: FSMContext):
    await save_renter_and_continue(message, state)


@router.message(AddRenterStates.waiting_for_notes)
async def process_renter_notes(message: Message, state: FSMContext):
    await state.update_data(renter_notes=message.text.strip())
    await save_renter_and_continue(message, state)


async def save_renter_and_continue(message: Message, state: FSMContext):
    data = await state.get_data()
    
    db = SessionLocal()
    try:
        renter = crud.create_renter(
            db=db,
            name=data['renter_name'],
            phone=data['renter_phone'],
            email=data.get('renter_email'),
            passport=data.get('renter_passport'),
            notes=data.get('renter_notes')
        )
        
        await state.update_data(renter_id=renter.id)
        await message.answer(
            f"‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {renter.name}\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=rental_type_keyboard(),
            parse_mode="Markdown"
        )
        await state.set_state(CreateRentalStates.waiting_for_rental_type)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )
        await state.clear()
    finally:
        db.close()


@router.callback_query(CreateRentalStates.waiting_for_renter_selection, F.data.startswith("renter_"))
async def select_renter(callback: CallbackQuery, state: FSMContext):
    renter_id = int(callback.data.split("_")[1])
    await state.update_data(renter_id=renter_id)
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã:",
        reply_markup=rental_type_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateRentalStates.waiting_for_rental_type)


@router.callback_query(CreateRentalStates.waiting_for_rental_type, F.data.startswith("rental_type_"))
async def select_rental_type(callback: CallbackQuery, state: FSMContext):
    rental_type_str = callback.data.split("_")[-1]
    rental_type = RentalType.SHORT_TERM if rental_type_str == "short_term" else RentalType.LONG_TERM
    await state.update_data(rental_type=rental_type)
    
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024",
        parse_mode="Markdown"
    )
    await state.set_state(CreateRentalStates.waiting_for_start_date)


@router.message(CreateRentalStates.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    start_date = parse_date(message.text.strip())
    
    if not start_date:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024"
        )
        return
    
    if start_date < date.today():
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
        )
        return
    
    await state.update_data(start_date=start_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.12.2024"
    )
    await state.set_state(CreateRentalStates.waiting_for_end_date)


@router.message(CreateRentalStates.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    end_date = parse_date(message.text.strip())
    
    if not end_date:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.12.2024"
        )
        return
    
    data = await state.get_data()
    start_date = data['start_date']
    
    if end_date <= start_date:
        await message.answer(
            "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
        )
        return
    
    await state.update_data(end_date=end_date)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ –≤ –ª–∞—Ä–∏ (–∏–ª–∏ 0 –µ—Å–ª–∏ –∑–∞–ª–æ–≥ –Ω–µ –±–µ—Ä—ë—Ç—Å—è):"
    )
    await state.set_state(CreateRentalStates.waiting_for_deposit)


@router.message(CreateRentalStates.waiting_for_deposit)
async def process_deposit(message: Message, state: FSMContext):
    try:
        deposit = float(message.text.strip())
        if deposit < 0:
            raise ValueError()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–ª–æ–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ):"
        )
        return
    
    await state.update_data(deposit=deposit)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –¥–æ–≥–æ–≤–æ—Ä—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    await state.set_state(CreateRentalStates.waiting_for_notes)


@router.message(CreateRentalStates.waiting_for_notes, F.text == "/skip")
async def skip_rental_notes(message: Message, state: FSMContext):
    await create_rental_contract(message, state)


@router.message(CreateRentalStates.waiting_for_notes)
async def process_rental_notes(message: Message, state: FSMContext):
    await state.update_data(contract_notes=message.text.strip())
    await create_rental_contract(message, state)


async def create_rental_contract(message: Message, state: FSMContext):
    data = await state.get_data()
    
    db = SessionLocal()
    try:
        # Get car info for daily rate
        car = crud.get_car_by_id(db, data['car_id'])
        
        rental = crud.create_rental(
            db=db,
            car_id=data['car_id'],
            renter_id=data['renter_id'],
            rental_type=data['rental_type'],
            start_date=data['start_date'],
            end_date=data['end_date'],
            daily_rate=car.daily_rate,
            deposit=data['deposit'],
            contract_notes=data.get('contract_notes')
        )
        
        await message.answer(
            f"‚úÖ *–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã —Å–æ–∑–¥–∞–Ω!*\n\n"
            f"{format_rental_info(rental)}",
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )
    finally:
        db.close()
        await state.clear()


@router.callback_query(F.data == "active_rentals")
async def show_active_rentals(callback: CallbackQuery):
    db = SessionLocal()
    try:
        # Check for overdue rentals first
        crud.check_overdue_rentals(db)
        
        active_rentals = crud.get_active_rentals(db)
        
        if not active_rentals:
            await callback.message.edit_text(
                "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã.",
                reply_markup=rental_menu_keyboard()
            )
            return
        
        await callback.message.edit_text(
            f"üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã ({len(active_rentals)})*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=rentals_keyboard(active_rentals),
            parse_mode="Markdown"
        )
        
    finally:
        db.close()


@router.callback_query(F.data.startswith("rental_"))
async def show_rental_details(callback: CallbackQuery):
    rental_id = int(callback.data.split("_")[1])
    
    db = SessionLocal()
    try:
        rental = crud.get_rental_by_id(db, rental_id)
        if not rental:
            await callback.answer("‚ùå –î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await callback.message.edit_text(
            format_rental_info(rental),
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    finally:
        db.close()


@router.callback_query(F.data == "overdue_rentals")
async def show_overdue_rentals(callback: CallbackQuery):
    db = SessionLocal()
    try:
        # Update overdue status
        overdue_rentals = crud.check_overdue_rentals(db)
        
        if not overdue_rentals:
            await callback.message.edit_text(
                "‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤.",
                reply_markup=rental_menu_keyboard()
            )
            return
        
        rentals_text = "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã:*\n\n"
        for rental in overdue_rentals:
            rentals_text += (
                f"üöó {rental.car.brand} {rental.car.model}\n"
                f"üë§ {rental.renter.name}\n"
                f"üìû {rental.renter.phone}\n"
                f"üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {rental.overdue_days} –¥–Ω.\n"
                f"üí∞ –ö –¥–æ–ø–ª–∞—Ç–µ: {format_currency(rental.total_amount - rental.paid_amount)}\n\n"
            )
        
        await callback.message.edit_text(
            rentals_text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    finally:
        db.close()


@router.callback_query(F.data == "renters")
async def show_renters(callback: CallbackQuery):
    db = SessionLocal()
    try:
        renters = crud.get_renters(db)
        
        if not renters:
            await callback.message.edit_text(
                "üë• –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
                reply_markup=rental_menu_keyboard()
            )
            return
        
        renters_text = f"üë• *–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã ({len(renters)})*\n\n"
        for renter in renters:
            active_rentals = [r for r in renter.rentals if r.is_active]
            status = f"({len(active_rentals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö)" if active_rentals else "(–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö)"
            
            renters_text += (
                f"üë§ {renter.name}\n"
                f"üìû {renter.phone}\n"
                f"üìä {status}\n\n"
            )
        
        await callback.message.edit_text(
            renters_text,
            reply_markup=back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    finally:
        db.close()
